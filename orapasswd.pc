/*
 *	orapasswd.pc
 *
 *	Change Oracle password account 
 *
 *	Copyright Pierre Forstmann 2021
 *
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>

#include <sqlca.h>

#define PASSWORD_MAX_LENGTH 20
#define USERNAME_MAX_LENGTH 30
#define ALIAS_MAX_LENGTH 20

struct option
{
     const char *name;
     int         has_arg;
     int        *flag;
     int         val;
};

#define no_argument 0
#define required_argument 1
#define optional_argument 2

 /*
  * getopt_long() -- long options parser
  *
  * Portions Copyright (c) 1987, 1993, 1994
  * The Regents of the University of California.  All rights reserved.
  *
  * Portions Copyright (c) 2003
  * PostgreSQL Global Development Group
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  * 3. Neither the name of the University nor the names of its contributors
  *    may be used to endorse or promote products derived from this software
  *    without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
  * src/port/getopt_long.c
  */
 
 
#define BADCH   '?'
#define BADARG  ':'
#define EMSG    ""
 
 
 /*
  * getopt_long
  *  Parse argc/argv argument vector, with long options.
  *
  * This implementation does not use optreset.  Instead, we guarantee that
  * it can be restarted on a new argv array after a previous call returned -1,
  * if the caller resets optind to 1 before the first call of the new series.
  * (Internally, this means we must be sure to reset "place" to EMSG before
  * returning -1.)
  */
static
 int
 getopt_long(int argc, char *const argv[],
             const char *optstring,
             const struct option *longopts, int *longindex)
 {
     static char *place = EMSG;  /* option letter processing */
     char       *oli;            /* option letter list index */
 
     if (!*place)
     {                           /* update scanning pointer */
         if (optind >= argc)
         {
             place = EMSG;
             return -1;
         }
 
         place = argv[optind];
 
         if (place[0] != '-')
         {
             place = EMSG;
             return -1;
         }
 
         place++;
 
         if (!*place)
         {
             /* treat "-" as not being an option */
             place = EMSG;
             return -1;
         }
 
         if (place[0] == '-' && place[1] == '\0')
         {
             /* found "--", treat it as end of options */
             ++optind;
             place = EMSG;
             return -1;
         }
 
         if (place[0] == '-' && place[1])
         {
             /* long option */
             size_t      namelen;
             int         i;
 
             place++;
 
             namelen = strcspn(place, "=");
             for (i = 0; longopts[i].name != NULL; i++)
             {
                 if (strlen(longopts[i].name) == namelen
                     && strncmp(place, longopts[i].name, namelen) == 0)
                 {
                     int         has_arg = longopts[i].has_arg;
 
                     if (has_arg != no_argument)
                     {
                         if (place[namelen] == '=')
                             optarg = place + namelen + 1;
                         else if (optind < argc - 1 &&
                                  has_arg == required_argument)
                         {
                             optind++;
                             optarg = argv[optind];
                         }
                         else
                         {
                             if (optstring[0] == ':')
                                 return BADARG;
 
                             if (opterr && has_arg == required_argument)
                                 fprintf(stderr,
                                         "%s: option requires an argument -- %s\n",
                                         argv[0], place);
 
                             place = EMSG;
                             optind++;
 
                             if (has_arg == required_argument)
                                 return BADCH;
                             optarg = NULL;
                         }
                     }
                     else
                     {
                         optarg = NULL;
                         if (place[namelen] != 0)
                         {
                             /* XXX error? */
                         }
                     }
 
                     optind++;
 
                     if (longindex)
                         *longindex = i;
 
                     place = EMSG;
 
                     if (longopts[i].flag == NULL)
                         return longopts[i].val;
                     else
                     {
                         *longopts[i].flag = longopts[i].val;
                         return 0;
                     }
                 }
             }
 
             if (opterr && optstring[0] != ':')
                 fprintf(stderr,
                         "%s: illegal option -- %s\n", argv[0], place);
             place = EMSG;
             optind++;
             return BADCH;
         }
     }
 
     /* short option */
     optopt = (int) *place++;
 
     oli = strchr(optstring, optopt);
     if (!oli)
     {
         if (!*place)
             ++optind;
         if (opterr && *optstring != ':')
             fprintf(stderr,
                     "%s: illegal option -- %c\n", argv[0], optopt);
         return BADCH;
     }
 
     if (oli[1] != ':')
     {                           /* don't need argument */
         optarg = NULL;
         if (!*place)
             ++optind;
     }
     else
     {                           /* need an argument */
         if (*place)             /* no white space */
             optarg = place;
         else if (argc <= ++optind)
         {                       /* no arg */
             place = EMSG;
             if (*optstring == ':')
                 return BADARG;
             if (opterr)
                 fprintf(stderr,
                         "%s: option requires an argument -- %c\n",
                         argv[0], optopt);
             return BADCH;
         }
         else
             /* white space */
             optarg = argv[optind];
         place = EMSG;
         ++optind;
     }
     return optopt;
 }

static do_disconnect();

/*
 *
 * sql_error
 *
 */

static void sql_error(void)
{
    fprintf(stderr, "Error message:  %s\n", sqlca.sqlerrm.sqlerrmc);
    exit(1);
}

/*
 *
 *  do_connect
 *
 */

static int do_connect(char *p_username, char *p_password, char *p_alias)
{
    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR  username[USERNAME_MAX_LENGTH + 1];
        VARCHAR  password[PASSWORD_MAX_LENGTH + 1];
        VARCHAR  connect_string[ALIAS_MAX_LENGTH + 1];
    EXEC SQL END DECLARE SECTION;


    strcpy(username.arr, p_username);
    username.len = (unsigned short)strlen((char *) username.arr);

    strcpy(password.arr, p_password);
    password.len = (unsigned short)strlen((char *) password.arr);

    strcpy(connect_string.arr, p_alias);
    connect_string.len = (unsigned short)strlen((char *) connect_string.arr);

    EXEC SQL WHENEVER SQLERROR DO sql_error();

    EXEC SQL CONNECT :username IDENTIFIED BY :password USING :connect_string;

    printf("\nConnected to ORACLE as user %s.\n", username.arr);

    return 0;

}

/*
 *
 * read_password
 * 
 */
static void read_password(char password[])
{
    static struct termios oldt, newt;
    int i = 0;
    int c;

    /*
     * saving the old settings of STDIN_FILENO and copy settings for resetting
     */
    tcgetattr( STDIN_FILENO, &oldt);
    newt = oldt;

    /*
     * setting the approriate bit in the termios struct
     */
    newt.c_lflag &= ~(ECHO);          

    /*
     * setting the new bits
     */
    tcsetattr( STDIN_FILENO, TCSANOW, &newt);

    /*
     * reading the password from the console
     */
    while ((c = getchar())!= '\n' && c != EOF && i < PASSWORD_MAX_LENGTH){
        password[i++] = c;
    }
    password[i] = '\0';

    /*
     * resetting our old STDIN_FILENO
     */ 
    tcsetattr( STDIN_FILENO, TCSANOW, &oldt);

}


/* 
 *
 * do_chgpasswd()
 *
 */

static int do_chgpasswd(char *p_username)
{
	char stmt[80];
	char new_password1[PASSWORD_MAX_LENGTH + 1];
	char new_password2[PASSWORD_MAX_LENGTH + 1];

	printf("New password:");
	read_password(new_password1);
	printf("\n");
	printf("New password:");
	read_password(new_password2);
	printf("\n");
   
        if (strcmp(new_password1, new_password2) != 0)
	{
		fprintf(stderr, "\n New passwords do not match.\n");	
		do_disconnect();
		exit(1);
	}

	strcpy(stmt, "ALTER USER ");
	strcat(stmt, p_username);
	strcat(stmt, " IDENTIFIED BY ");
	strcat(stmt, new_password2);	
	
	EXEC SQL EXECUTE IMMEDIATE :stmt;
	
	printf("\n Password changed.\n");
}

/*
 *
 * do_disconnect
 *
 */

static int do_disconnect()
{
    EXEC SQL ROLLBACK WORK RELEASE;

    printf("\nDisconnected from ORACLE.\n");
}


static void usage(void)
{
	printf(("orapasswd changes Oracle account password.\n\n"));
	printf(("Usage:\n"));
	printf(("  orapasswd [OPTION]...\n\n"));
	printf(("Options:\n"));
	printf(("  -u, --user     user name\n"));
	printf(("  -a, --alias    tnsnames.ora alias\n"));
	printf(("\n"));
}


/* 
 *
 * main
 *
 */

int main(int argc, char **argv)
{

	char	c;
	int	optindex;
	int	user_is_set;
	int	alias_is_set;
	char	username[USERNAME_MAX_LENGTH + 1 ];
	char	password[PASSWORD_MAX_LENGTH + 1];
	char	alias[ALIAS_MAX_LENGTH + 1 ];
	

	static struct option long_options[] = 
	{
		{"username", required_argument, NULL, 'u'},
		{"alias", required_argument, NULL, 'a'},
		{NULL, 0, NULL, 0}
	};

	if (argc > 1)
	{
		if (strcmp(argv[1], "--help") == 0 || strcmp(argv[1], "-?") == 0)
		{
			usage();
			exit(0);
		}
	}

	user_is_set = 0;
	alias_is_set = 0;
	
	while (( c = getopt_long(argc, argv, "u:a:", long_options, &optindex)) != -1)
	{
		switch (c)
		{
			case 'u':
				strcpy(username, optarg);
				user_is_set = 1;
				break;
			case 'a':
				strcpy(alias, optarg);
				alias_is_set = 1;
				break;
			default:
				fprintf(stderr, "Try \"orapasswd --help\" for more information.\n");
			 	exit(1);	
				break;
		}
	}

	if (user_is_set == 0 || alias_is_set == 0)
	{
        	fprintf(stderr, "Missing parameters \n\n");
		usage();
         	exit(1);	
	}

	
	printf("password:");
	read_password(password);
	printf("\n");

	do_connect(username, password, alias);
	
	do_chgpasswd(username);
	
	do_disconnect();

	exit(0);

}

